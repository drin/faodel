
message( STATUS "Faodel configuring from ${CMAKE_CURRENT_LIST_FILE}" )

# CMake built-ins that we'll use
include( FindPkgConfig )
include( FindPackageHandleStandardArgs )
include( CMakePackageConfigHelpers )

include( "${CMAKE_CURRENT_LIST_DIR}/FaodelTargets.cmake" )

@PACKAGE_INIT@

# Compute paths

set_and_check( Faodel_INCLUDE_DIR "@PACKAGE_INCLUDE_INSTALL_DIR@" )
set_and_check( Faodel_LIBRARY_DIR "@PACKAGE_LIBRARY_INSTALL_DIR@" )
set_and_check( Faodel_BINARY_DIR "@PACKAGE_BINARY_INSTALL_DIR@" )

set(Faodel_CXX_COMPILER @CMAKE_CXX_COMPILER@ )
set(Faodel_C_COMPILER   @CMAKE_C_COMPILER@ )
set(Faodel_CXX_FLAGS   "@CMAKE_CXX_FLAGS@" )

set( Faodel_BUILT_WITH_MPI @USE_MPI@ )
set( Faodel_BUILT_CMAKE_SYSTEM_NAME @CMAKE_SYSTEM_NAME@ )
set( Faodel_BUILT_NETWORK_LIBRARY @NETWORK_LIBRARY@ )


#
#  Pre-requisites for Faodel
#
#

# Don't consider this a success until the end
set( Faodel_FOUND 0 )

#
# Require C++11 from whatever compiler is in use
#
set( CMAKE_CXX_STANDARD 11 )
set( CMAKE_CXX_STANDARD_REQUIRED YES )
set( CMAKE_CXX_EXTENSIONS OFF )

find_package( Threads )

message( STATUS "[Faodel] Locating required third-party libraries" )

include( ${CMAKE_CURRENT_LIST_DIR}/FaodelTPLs.cmake )

if( NOT USE_MPI AND Faodel_BUILT_WITH_MPI )
  # The user has indicated that they don't want an MPI_BUILD (USE_MPI not set) but they've
  # found a FAODEL install that was built with MPI. This will almost certainly result in
  # missing symbols at link time (if not a compile failure because mpi.h can't be found).
  # So let's warn about this.
  message( WARNING
    "[Faodel] This build isn't configuring to use MPI (USE_MPI not set), but Faodel was built with MPI. This is almost certainly not what you want." )
endif()

message( STATUS "[Faodel] configured, available targets in ${CMAKE_CURRENT_LIST_DIR}/FaodelTargets.cmake" )

set(Faodel_FOUND 1)
