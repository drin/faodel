// Copyright 2018 National Technology & Engineering Solutions of Sandia, 
// LLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS,  
// the U.S. Government retains certain rights in this software. 

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NNTI_PACKABLE_H_RPCGEN
#define _NNTI_PACKABLE_H_RPCGEN

#include <nnti/nnti_packable.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "nnti/nntiConfig.h"
#include "nnti/nnti_xdr.h"
#include <stdint.h>

enum NNTI_datatype_t {
	NNTI_dt_peer = 1111,
	NNTI_dt_buffer = 1112,
	NNTI_dt_work_id = 1113,
	NNTI_dt_work_request = 1114,
	NNTI_dt_transport = 1115,
	NNTI_dt_event_queue = 1116,
	NNTI_dt_callback = 1117
};
typedef enum NNTI_datatype_t NNTI_datatype_t;

enum NNTI_transport_id_t {
	NNTI_TRANSPORT_NULL = 0,
	NNTI_TRANSPORT_IBVERBS = 1,
	NNTI_TRANSPORT_UGNI = 2,
	NNTI_TRANSPORT_MPI = 3
};
typedef enum NNTI_transport_id_t NNTI_transport_id_t;
#if defined(NNTI_BUILD_IBVERBS)
#define NNTI_DEFAULT_TRANSPORT NNTI_TRANSPORT_IBVERBS
#elif defined(NNTI_BUILD_UGNI)
#define NNTI_DEFAULT_TRANSPORT NNTI_TRANSPORT_UGNI
#elif defined(NNTI_BUILD_MPI)
#define NNTI_DEFAULT_TRANSPORT NNTI_TRANSPORT_MPI
#else
#define NNTI_DEFAULT_TRANSPORT NNTI_TRANSPORT_NULL
#endif
#define NNTI_URL_LEN 128

typedef uint32_t NNTI_ip_addr;

typedef uint16_t NNTI_tcp_port;

struct NNTI_null_process_p_t {
	int i;
};
typedef struct NNTI_null_process_p_t NNTI_null_process_p_t;

struct NNTI_ib_process_p_t {
	NNTI_ip_addr addr;
	NNTI_tcp_port port;
};
typedef struct NNTI_ib_process_p_t NNTI_ib_process_p_t;

typedef uint32_t NNTI_instance_id;

struct NNTI_ugni_process_p_t {
	NNTI_ip_addr addr;
	NNTI_tcp_port port;
	NNTI_instance_id inst_id;
};
typedef struct NNTI_ugni_process_p_t NNTI_ugni_process_p_t;

struct NNTI_mpi_process_p_t {
	int rank;
};
typedef struct NNTI_mpi_process_p_t NNTI_mpi_process_p_t;

struct NNTI_local_process_p_t {
	int i;
};
typedef struct NNTI_local_process_p_t NNTI_local_process_p_t;

struct NNTI_remote_process_p_t {
	NNTI_transport_id_t transport_id;
	union {
		NNTI_null_process_p_t null;
		NNTI_ib_process_p_t ib;
		NNTI_ugni_process_p_t ugni;
		NNTI_mpi_process_p_t mpi;
	} NNTI_remote_process_p_t_u;
};
typedef struct NNTI_remote_process_p_t NNTI_remote_process_p_t;

typedef uint64_t NNTI_process_id_t;

struct NNTI_peer_p_t {
	NNTI_datatype_t datatype;
	NNTI_process_id_t pid;
	NNTI_remote_process_p_t peer;
};
typedef struct NNTI_peer_p_t NNTI_peer_p_t;

struct NNTI_null_rdma_addr_p_t {
	int i;
};
typedef struct NNTI_null_rdma_addr_p_t NNTI_null_rdma_addr_p_t;

struct NNTI_ib_rdma_addr_p_t {
	uint64_t buf;
	uint32_t key;
	uint32_t size;
};
typedef struct NNTI_ib_rdma_addr_p_t NNTI_ib_rdma_addr_p_t;

struct NNTI_ugni_mem_hdl_p_t {
	uint64_t qword1;
	uint64_t qword2;
};
typedef struct NNTI_ugni_mem_hdl_p_t NNTI_ugni_mem_hdl_p_t;

struct NNTI_ugni_rdma_addr_p_t {
	uint64_t buf;
	uint32_t size;
	NNTI_ugni_mem_hdl_p_t mem_hdl;
};
typedef struct NNTI_ugni_rdma_addr_p_t NNTI_ugni_rdma_addr_p_t;

typedef uint64_t NNTI_match_bits;

struct NNTI_mpi_rdma_addr_p_t {
	NNTI_match_bits cmd_tag;
	NNTI_match_bits get_data_tag;
	NNTI_match_bits put_data_tag;
	NNTI_match_bits atomic_data_tag;
	uint64_t buf;
	uint32_t size;
};
typedef struct NNTI_mpi_rdma_addr_p_t NNTI_mpi_rdma_addr_p_t;

struct NNTI_local_rdma_addr_p_t {
	int i;
};
typedef struct NNTI_local_rdma_addr_p_t NNTI_local_rdma_addr_p_t;

struct NNTI_remote_addr_p_t {
	NNTI_transport_id_t transport_id;
	union {
		NNTI_null_rdma_addr_p_t null;
		NNTI_ib_rdma_addr_p_t ib;
		NNTI_ugni_rdma_addr_p_t ugni;
		NNTI_mpi_rdma_addr_p_t mpi;
	} NNTI_remote_addr_p_t_u;
};
typedef struct NNTI_remote_addr_p_t NNTI_remote_addr_p_t;

struct NNTI_buffer_p_t {
	NNTI_remote_addr_p_t buffer;
	uint8_t flags;
};
typedef struct NNTI_buffer_p_t NNTI_buffer_p_t;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_NNTI_datatype_t (XDR *, NNTI_datatype_t*);
extern  bool_t xdr_NNTI_transport_id_t (XDR *, NNTI_transport_id_t*);
extern  bool_t xdr_NNTI_ip_addr (XDR *, NNTI_ip_addr*);
extern  bool_t xdr_NNTI_tcp_port (XDR *, NNTI_tcp_port*);
extern  bool_t xdr_NNTI_null_process_p_t (XDR *, NNTI_null_process_p_t*);
extern  bool_t xdr_NNTI_ib_process_p_t (XDR *, NNTI_ib_process_p_t*);
extern  bool_t xdr_NNTI_instance_id (XDR *, NNTI_instance_id*);
extern  bool_t xdr_NNTI_ugni_process_p_t (XDR *, NNTI_ugni_process_p_t*);
extern  bool_t xdr_NNTI_mpi_process_p_t (XDR *, NNTI_mpi_process_p_t*);
extern  bool_t xdr_NNTI_local_process_p_t (XDR *, NNTI_local_process_p_t*);
extern  bool_t xdr_NNTI_remote_process_p_t (XDR *, NNTI_remote_process_p_t*);
extern  bool_t xdr_NNTI_process_id_t (XDR *, NNTI_process_id_t*);
extern  bool_t xdr_NNTI_peer_p_t (XDR *, NNTI_peer_p_t*);
extern  bool_t xdr_NNTI_null_rdma_addr_p_t (XDR *, NNTI_null_rdma_addr_p_t*);
extern  bool_t xdr_NNTI_ib_rdma_addr_p_t (XDR *, NNTI_ib_rdma_addr_p_t*);
extern  bool_t xdr_NNTI_ugni_mem_hdl_p_t (XDR *, NNTI_ugni_mem_hdl_p_t*);
extern  bool_t xdr_NNTI_ugni_rdma_addr_p_t (XDR *, NNTI_ugni_rdma_addr_p_t*);
extern  bool_t xdr_NNTI_match_bits (XDR *, NNTI_match_bits*);
extern  bool_t xdr_NNTI_mpi_rdma_addr_p_t (XDR *, NNTI_mpi_rdma_addr_p_t*);
extern  bool_t xdr_NNTI_local_rdma_addr_p_t (XDR *, NNTI_local_rdma_addr_p_t*);
extern  bool_t xdr_NNTI_remote_addr_p_t (XDR *, NNTI_remote_addr_p_t*);
extern  bool_t xdr_NNTI_buffer_p_t (XDR *, NNTI_buffer_p_t*);

#else /* K&R C */
extern bool_t xdr_NNTI_datatype_t ();
extern bool_t xdr_NNTI_transport_id_t ();
extern bool_t xdr_NNTI_ip_addr ();
extern bool_t xdr_NNTI_tcp_port ();
extern bool_t xdr_NNTI_null_process_p_t ();
extern bool_t xdr_NNTI_ib_process_p_t ();
extern bool_t xdr_NNTI_instance_id ();
extern bool_t xdr_NNTI_ugni_process_p_t ();
extern bool_t xdr_NNTI_mpi_process_p_t ();
extern bool_t xdr_NNTI_local_process_p_t ();
extern bool_t xdr_NNTI_remote_process_p_t ();
extern bool_t xdr_NNTI_process_id_t ();
extern bool_t xdr_NNTI_peer_p_t ();
extern bool_t xdr_NNTI_null_rdma_addr_p_t ();
extern bool_t xdr_NNTI_ib_rdma_addr_p_t ();
extern bool_t xdr_NNTI_ugni_mem_hdl_p_t ();
extern bool_t xdr_NNTI_ugni_rdma_addr_p_t ();
extern bool_t xdr_NNTI_match_bits ();
extern bool_t xdr_NNTI_mpi_rdma_addr_p_t ();
extern bool_t xdr_NNTI_local_rdma_addr_p_t ();
extern bool_t xdr_NNTI_remote_addr_p_t ();
extern bool_t xdr_NNTI_buffer_p_t ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NNTI_PACKABLE_H_RPCGEN */
