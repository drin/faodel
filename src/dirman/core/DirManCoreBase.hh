// Copyright 2021 National Technology & Engineering Solutions of Sandia, LLC
// (NTESS). Under the terms of Contract DE-NA0003525 with NTESS, the U.S.
// Government retains certain rights in this software.

#ifndef DIRMAN_DIRECTORYMANAGERCOREBASE_HH
#define DIRMAN_DIRECTORYMANAGERCOREBASE_HH

#include "faodel-common/Common.hh"
#include "faodel-common/LoggingInterface.hh"
#include "faodel-common/DirectoryInfo.hh"

#include "dirman/common/DirectoryCache.hh"
#include "dirman/common/DirectoryOwnerCache.hh"

namespace dirman {
namespace internal {

/**
 * @brief The base class for defining the DirManCore API
 *
 * DirMan provides a way to plug in different implementations. This class
 * defines the API for the implementations.
 */
class DirManCoreBase 
  : public faodel::InfoInterface,
    public faodel::LoggingInterface {

public:
  DirManCoreBase() = delete;

  explicit DirManCoreBase(faodel::internal_use_only_t called_by_unconfigured);

  explicit DirManCoreBase(const faodel::Configuration &config, const std::string &component_type);

  ~DirManCoreBase() override;

  //Bootstrap calls are handled in OpBoxCoreUnconfigured. OBCU calls init,
  //start, and finish as directed by bootstrap.
  virtual void start()=0;
  virtual void finish()=0;
  virtual std::string GetType() const = 0;

  //DirMan Exposed API
  virtual bool Locate(const faodel::ResourceURL &search_url, faodel::nodeid_t *reference_node=nullptr);
  virtual bool GetDirectoryInfo(const faodel::ResourceURL &search_url, bool check_local, bool check_remote, faodel::DirectoryInfo *dir_info=nullptr) = 0;

  virtual bool DefineNewDir(const faodel::DirectoryInfo &dir_info) = 0;
          bool DefineNewDir(const faodel::ResourceURL &url);

  virtual bool HostNewDir(const faodel::DirectoryInfo &dir_info) = 0;
          bool HostNewDir(const faodel::ResourceURL &url);

  //When joining a dir, you must give directory path for your node to live in. The actual name can either
  //be provided by the user or generated by the resource owner.
          bool JoinDirWithoutName(const faodel::ResourceURL &url, faodel::DirectoryInfo *dir_info=nullptr);
  virtual bool JoinDirWithName(const faodel::ResourceURL &url, std::string name, faodel::DirectoryInfo *dir_info=nullptr) = 0;
  virtual bool LeaveDir(const faodel::ResourceURL &url, faodel::DirectoryInfo *dir_info=nullptr) = 0;

  //Remove references to a dir from the dirman server
  virtual bool DropDir(const faodel::ResourceURL &url) = 0;


  //Report back who this node talks to to get info
  virtual faodel::nodeid_t GetAuthorityNode() const = 0;

  //Get a list of names this node knows about
  virtual void GetCachedNames(std::vector<std::string> *resource_names);

  //Different ways of looking up local info
  bool lookupLocal(const std::vector<faodel::ResourceURL> &search_url,  std::vector<faodel::DirectoryInfo> *dir_info=nullptr);  //for rpc
  bool lookupLocal(const faodel::ResourceURL &search_url,  faodel::DirectoryInfo *dir_info=nullptr, faodel::nodeid_t *reference_node=nullptr);
  bool lookupLocal(const std::string &bucket_path, faodel::DirectoryInfo *dir_info=nullptr, faodel::nodeid_t *reference_node=nullptr);


  //Provide info back to whookie
  void HandleWhookieStatus(const std::map<std::string,std::string> &args, std::stringstream &results);
  void HandleWhookieEntry(const std::map<std::string,std::string> &args, std::stringstream &results);

  //InfoInterface
  void sstr(std::stringstream &ss, int depth=0, int indent=0) const override = 0;

protected:
  DirectoryCache  dc_others;       //Resources others (ie copies from prior lookups)
  DirectoryCache  dc_mine;         //Resources I own (ie master copy in system)
  DirectoryOwnerCache doc;         //Where to find items
  faodel::nodeid_t my_node;        //Who I am
  faodel::bucket_t default_bucket; //Bucket to use
  bool strict_checking;            //Add additional hooks for checking requests

  //Internal API for implementing Exposed API
  virtual bool discoverParent(const faodel::ResourceURL &url, faodel::nodeid_t *reference_node) = 0;
  virtual bool cacheForeignDir(const faodel::DirectoryInfo &dir_info) = 0;
  virtual bool lookupRemote(faodel::nodeid_t nodeid, const faodel::ResourceURL &resource_url, faodel::DirectoryInfo *dir_info=nullptr) = 0;
  virtual bool joinRemote(faodel::nodeid_t parent_node, const faodel::ResourceURL &child_url, bool send_detailed_reply=false) = 0;
  virtual void appendWhookieParameterTable(faodel::ReplyStream *rs);

  //Helpers
  faodel::nodeid_t parseConfigForRootNode(const faodel::Configuration &config) const;
  std::vector<std::string> readURLsFromFilesWithRetry(std::string file_names);
  bool writeURLsToFileOrDie(const std::string file_name, const std::vector<faodel::ResourceURL> &urls);

};

} // namespace internal
} // namespace dirman

#endif // DIRMAN_DIRECTORYMANAGERCOREBASE_HH
