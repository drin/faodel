// Copyright 2018 National Technology & Engineering Solutions of Sandia, 
// LLC (NTESS). Under the terms of Contract DE-NA0003525 with NTESS,  
// the U.S. Government retains certain rights in this software. 

#ifndef OPBOX_DIRECTORYMANAGERCOREBASE_HH
#define OPBOX_DIRECTORYMANAGERCOREBASE_HH

#include "common/Common.hh"
#include "common/LoggingInterface.hh"

#include "opbox/services/dirman/DirectoryInfo.hh"
#include "opbox/services/dirman/common/DirectoryCache.hh"
#include "opbox/services/dirman/common/DirectoryOwnerCache.hh"

namespace opbox {
namespace dirman {
namespace internal {

/**
 * @brief The base class for defining the DirManCore API
 *
 * DirMan provides a way to plug in different implementations. This class
 * defines the API for the implementations.
 */
class DirManCoreBase 
  : public faodel::InfoInterface,
    public faodel::LoggingInterface {

public:
  DirManCoreBase() = delete;

  explicit DirManCoreBase(faodel::internal_use_only_t called_by_unconfigured);

  explicit DirManCoreBase(const faodel::Configuration &config, std::string component_type);

  ~DirManCoreBase() override;

  //Boostrap calls are handled in OpBoxCoreUnconfigured. OBCU calls init,
  //start, and finish as directed by bootstrap.
  virtual void start()=0;
  virtual void finish()=0;
  virtual std::string GetType() const = 0;

  //DirMan Exposed API
  virtual bool Locate(const faodel::ResourceURL &search_url, faodel::nodeid_t *reference_node=nullptr);
  virtual bool GetDirectoryInfo(const faodel::ResourceURL &url, bool check_local, bool check_remote, DirectoryInfo *dir_info=nullptr) = 0;
  virtual bool HostNewDir(const DirectoryInfo &dir_info) = 0;
          bool HostNewDir(const faodel::ResourceURL &url);

  //When joining a dir, you must give directory path for your node to live in. The actual name can either
  //be provided by the user or generated by the resource owner.
          bool JoinDirWithoutName(const faodel::ResourceURL &url, DirectoryInfo *dir_info=nullptr);
  virtual bool JoinDirWithName(const faodel::ResourceURL &url, std::string name, DirectoryInfo *dir_info=nullptr) = 0;
  virtual bool LeaveDir(const faodel::ResourceURL &url, DirectoryInfo *dir_info=nullptr) = 0;



  bool lookupLocal(const std::vector<faodel::ResourceURL> &search_url,  std::vector<DirectoryInfo> *dir_info=nullptr);  //for rpc
  bool lookupLocal(const faodel::ResourceURL &search_url,  DirectoryInfo *dir_info=nullptr, faodel::nodeid_t *reference_node=nullptr);
  bool lookupLocal(const std::string &bucket_path, DirectoryInfo *dir_info=nullptr, faodel::nodeid_t *reference_node=nullptr);
  //bool joinLocal(const faodel::ResourceURL &child_url, DirectoryInfo *parent_dir_info=nullptr); //for rpc


  void HandleWebhookStatus(const std::map<std::string,std::string> &args, std::stringstream &results);
  void HandleWebhookEntry(const std::map<std::string,std::string> &args, std::stringstream &results);

  //InfoInterface
  virtual void sstr(std::stringstream &ss, int depth=0, int indent=0) const = 0;

protected:
  DirectoryCache  dc_others; //Resources others (ie copies from prior lookups)
  DirectoryCache  dc_mine;   //Resources I own (ie master copy in system)
  DirectoryOwnerCache doc;   //Where to find items
  faodel::nodeid_t my_node; //Who I am


  //Internal API for implementing Exposed API
  virtual bool discoverParent(const faodel::ResourceURL &url, faodel::nodeid_t *reference_node) = 0;
  virtual bool cacheForeignDir(const DirectoryInfo &dir_info) = 0;
  virtual bool lookupRemote(faodel::nodeid_t nodeid, const faodel::ResourceURL &resource_url, DirectoryInfo *dir_info=nullptr) = 0;
  virtual bool joinRemote(faodel::nodeid_t parent_node, const faodel::ResourceURL &child_url, bool send_detailed_reply=false) = 0;

  std::vector<std::string> readURLsFromFilesWithRetry(std::string file_names);
  bool writeURLsToFileOrDie(const std::string file_name, const std::vector<faodel::ResourceURL> &urls);


  //bool registerURL(const faodel::ResourceURL url);
  //bool registerDirectoryInfo(const DirectoryInfo resource);

  //bool _RegisterDirectoryInfo(std::map<std::string, DirectoryInfo *> &ric, const DirectoryInfo &dir_info);
  //bool _LookupDirectoryInfo(std::map<std::string, DirectoryInfo *> &ric, const faodel::ResourceURL &url, DirectoryInfo **dir_info);

  bool debug;
  bool strict_checking;
  faodel::bucket_t default_bucket;

};

} // namespace internal
} // namespace dirman
} // namespace opbox

#endif // OPBOX_DIRECTORYMANAGERCOREBASE_HH
